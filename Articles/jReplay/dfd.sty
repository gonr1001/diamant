%------   IDENTIFICATION   -----------------------------------------------------

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dfd}[1997/03/10 v1.0]

%------   INITIAL CODE   -------------------------------------------------------

\newsavebox{\processbox}
\newsavebox{\filebox}
\newsavebox{\splitbox}
\newsavebox{\cornerbox}

\newcount\pxOne\newcount\pyOne\newcount\dxOne\newcount\dyOne\newcount\lOne
\newcount\pxTwo\newcount\pyTwo\newcount\dxTwo\newcount\dyTwo\newcount\lTwo
\newcount\pxThree\newcount\pyThree\newcount\dxThree\newcount\dyThree\newcount\lThree
\newcount\pxi\newcount\pyi\newcount\pxii\newcount\pyii
\newcount\boxx\newcount\boxy\newcount\rcoin\newcount\dcoin\newcount\pybox

%------   DECLARATION OF OPTIONS   ---------------------------------------------
%------   EXECUTION OF OPTIONS   -----------------------------------------------
%------   PACKAGE LOADING   ----------------------------------------------------
%------   MAIN CODE   ----------------------------------------------------------

%-------------------------------------------------------------------------------
%----- Mode vecteur: corner ou split se termine par une fleche 
%-------------------------------------------------------------------------------
\newcommand{\vectorstyle}{\let\linetype=\vector}

%-------------------------------------------------------------------------------
%----- Mode ligne: corner ou split se termine par une ligne 
%-------------------------------------------------------------------------------
\newcommand{\linestyle}{\let\linetype=\line}

%-------------------------------------------------------------------------------
%----- Mode square: corner ou split avec angle carre 
%-------------------------------------------------------------------------------
\newcommand{\squarestyle}{\let\cornerstyle=s}

%-------------------------------------------------------------------------------
%----- Mode round: corner ou split avec angle rond 
%-------------------------------------------------------------------------------
\newcommand{\roundstyle}{\let\cornerstyle=r}

%-------------------------------------------------------------------------------
%----- Ajustement du rayon de roundstyle \unitlength 
%-------------------------------------------------------------------------------
\newcommand{\rayon}[1]{
\ifnum#1>0\rcoin=#1%
\else\errmessage{------>> RAYON NEGATIF OU ZERO DANS APPEL A RAYON}\fi}

%-------------------------------------------------------------------------------
%----- Options par defaut 
%-------------------------------------------------------------------------------
\rayon{1}\roundstyle\vectorstyle

%-------------------------------------------------------------------------------
%----- Definition des dimensions d'un store dans un environnement picture  
%-------------------------------------------------------------------------------
%----- parametre 1 largeur
%----- parametre 2 hauteur
%----- parametre 3 intervale des lignes horizontale
%-------------------------------------------------------------------------------
\newcommand{\deffilebox}[3]{%
\ifnum#1<0 \errmsg{------>> Largeur negative pour un fichier} \fi%
\ifnum#2<0 \errmsg{------>> Hauteur negative pour un fichier} \fi%
\def\lfilebox{#1}\def\hfilebox{#2}\savebox{\filebox}(0,0)[bl]{%
\multiput(0,0)(0,#3){2}{\line(1,0){#1}}%
\multiput(0,#2)(0,-#3){2}{\line(1,0){#1}}}}

%-------------------------------------------------------------------------------
%----- Genere un store dans un environnement picture (origine: bottom-left)
%-------------------------------------------------------------------------------
%----- parametre optionnel: texte dans le fichier, les \\ sont acceptes
%-------------------------------------------------------------------------------
\newcommand{\fichier}[1][]{\usebox{\filebox}%
\makebox(\lfilebox,\hfilebox){\renewcommand{\arraystretch}{0.5}%
\begin{tabular}{c}#1\end{tabular}}}

%-------------------------------------------------------------------------------
%----- Definition des dimensions d'un process dans un environnement picture  
%-------------------------------------------------------------------------------
%----- parametre 1 largeur
%----- parametre 2 hauteur
%-------------------------------------------------------------------------------
\newcommand{\defprocessbox}[2]{%
\ifnum#1<0 \errmsg{------>> Largeur negative pour un process} \fi%
\ifnum#2<0 \errmsg{------>> Hauteur negative pour un process} \fi%
\def\lprocessbox{#1} \def\hprocessbox{#2}%
\savebox{\processbox}(0,0)[bl]{\put(0,0){\framebox(#1,#2){}}}}

%-------------------------------------------------------------------------------
%----- Genere un process dans un environnement picture (origine: bottom-left)
%-------------------------------------------------------------------------------
%----- parametre optionnel: texte dans le fichier, les \\ sont acceptes
%-------------------------------------------------------------------------------
\newcommand{\process}[1][]{\usebox{\processbox}%
\makebox(\lprocessbox,\hprocessbox){\renewcommand{\arraystretch}{0.5}%
\begin{tabular}{c}#1\end{tabular}}}

%-------------------------------------------------------------------------------
%----- Commande generant un flux en coin (90 degres). En mode \roundstyle, le 
%----- mode par defaut, le rayon du coin doit etre plus petit que le segment le
%----- le plus court! L'autre mode est squarestyle.
%----- L'origine du flux est celle du parametre 2.
%-------------------------------------------------------------------------------
%----- Parametre 1, optionnel, indique si le 1er segment est en x ou y. 
%----- Parametre 2 longeur (int) du 1er segment.
%----- Parametre 3 hauteur (int) du 2em segment.
%-------------------------------------------------------------------------------
\newcommand{\corner}[3][x]{%
\pxOne=0\pyOne=0\lOne=#2\lTwo=#3\dcoin=\rcoin \advance\dcoin by \rcoin \pybox=0%
\if#1x\dxOne=1\dyOne=0\pxTwo=#2\pyTwo=0\dxTwo=0\dyTwo=1\boxx=#2\boxy=#3%
\else\dxOne=0\dyOne=1\pxTwo=0\pyTwo=#2\dxTwo=1\dyTwo=0\boxx=#3\boxy=#2\fi%
\ifnum\lOne<0\dxOne=-\dxOne\dyOne=-\dyOne\lOne=-\lOne \fi%
\ifnum\lTwo<0\dxTwo=-\dxTwo\dyTwo=-\dyTwo\lTwo=-\lTwo \fi%
\if r\cornerstyle \if#1y\ifnum\dyOne>0\ifnum\dcoin>\lOne\pybox=\lOne\advance\pybox by -\dcoin\fi\fi\fi\fi%
\def\tmpcmd{\if r\cornerstyle%
\ifnum\rcoin>\lOne \errmessage{------ RAYON TROP GRAND POUR LES SEGMENTS} \fi%
\ifnum\rcoin>\lTwo \errmessage{------ RAYON TROP GRAND POUR LES SEGMENTS} \fi%
\advance\lOne by -\rcoin \advance\lTwo by -\rcoin%
\if#1x\ifnum\dyTwo>0 \advance\pyTwo by \rcoin \pyi=\rcoin \else \advance\pyTwo by -\rcoin \pyi=-\rcoin \fi%
\pxi=\boxx \ifnum\dxOne>0 \advance\pxi by -\rcoin \else \advance\pxi by \rcoin\fi%
\ifnum\dxOne>0\ifnum\dyTwo>0 \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[br]}\else \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tr]}\fi%
\else\ifnum\dyTwo>0 \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[bl]}\else\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tl]}\fi\fi%
\else\ifnum\dxTwo>0 \advance\pxTwo by \rcoin \pxi=\rcoin \else \advance\pxTwo by -\rcoin \pxi=-\rcoin\fi%
\pyi=\pyTwo \ifnum\dyOne>0 \advance\pyi by -\rcoin \else \advance\pyi by \rcoin\fi%
\ifnum\dyOne>0\ifnum\dxTwo>0\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tl]}\else\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tr]}\fi%
\else\ifnum\dxTwo>0 \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[bl]}\else\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[br]}\fi\fi\fi\fi
\ifnum\lOne>0\put(\pxOne,\pyOne){\line(\dxOne,\dyOne){\lOne}}\fi%
\ifnum\lTwo<0 \else\put(\pxTwo,\pyTwo){\linetype(\dxTwo,\dyTwo){\lTwo}}\fi}%
\if#1x\ifnum\dyTwo>0\savebox{\cornerbox}(\boxx,0)[b]{\tmpcmd}\else\savebox{\cornerbox}(\boxx,0)[t]{\tmpcmd}\fi%
\else\ifnum\dyOne>0\savebox{\cornerbox}(\boxx,0)[b]{\tmpcmd}\else\savebox{\cornerbox}(\boxx,0)[t]{\tmpcmd}\fi\fi%
\put(0,\pybox){\usebox{\cornerbox}}}

%-------------------------------------------------------------------------------
%----- Commande generant un flux en zig zag de 3 segments (90 degres). En mode
%----- \roundstyle, le mode par defaut, le rayon du coin doit etre plus petit
%----- que le segment le  le plus court!. L'autre mode est squarestyle.
%----- L'origine du flux est celle du parametre 2.
%-------------------------------------------------------------------------------
%----- Parametre 1, optionnel, indique si le 1er segment est en x ou y. 
%----- Parametre 2 longeur (int) du 1er segment.
%----- Parametre 3 hauteur (int) du 2em segment.
%----- Parametre 4 longeur (int) du 3em segment.
%-------------------------------------------------------------------------------
\newcommand{\split}[4][x]{%
\pxOne=0\pyOne=0\lOne=#2\lTwo=#3\lThree=#4\dcoin=\rcoin \advance\dcoin by \rcoin \pybox=0%
\if#1x\dxOne=1\dyOne=0\pxTwo=#2\pyTwo=0\dxTwo=0\dyTwo=1\dxThree=1\dyThree=0\pxThree=#2\pyThree#3\boxx=#2\boxy=#3%
\else\dxOne=0\dyOne=1\pxTwo=0\pyTwo=#2\dxTwo=1\dyTwo=0\dxThree=0\dyThree=1\pxThree=#3\pyThree#2\boxx=#3\boxy=#2\fi%
\ifnum\lOne<0\dxOne=-\dxOne\dyOne=-\dyOne\lOne=-\lOne \fi%
\ifnum\lTwo<0\dxTwo=-\dxTwo\dyTwo=-\dyTwo\lTwo=-\lTwo \fi%
\ifnum\lThree<0\dxThree=-\dxThree\dyThree=-\dyThree\lThree=-\lThree\fi%
\if#1y\ifnum\dyOne>0%
\ifnum\dyThree>0\if r\cornerstyle\ifnum\dcoin>\lOne\pybox=\lOne\advance\pybox by -\dcoin\fi\fi%
\else\ifnum\lThree>\lOne\pybox=\lOne\advance\pybox by -\lThree\fi%
\if r\cornerstyle \ifnum\dcoin>\lThree\pybox=\lOne\advance\pybox by -\dcoin\fi\fi\fi%
\else\ifnum\dyThree>0\ifnum\lThree>\lOne\pybox=-\lOne\advance\pybox by \lThree\fi\fi\fi\fi%
\def\tmpcmd{\if r\cornerstyle%
\ifnum\rcoin>\lOne\errmessage{------ RAYON TROP GRAND POUR LES SEGMENTS}\fi%
\ifnum\dcoin>\lTwo\errmessage{------ RAYON TROP GRAND POUR LES SEGMENTS}\fi%
\ifnum\rcoin>\lThree\errmessage{------ RAYON TROP GRAND POUR LES SEGMENTS}\fi%
\advance\lOne by -\rcoin \advance\lTwo by -\dcoin \advance\lThree by -\rcoin%
\if#1x\ifnum\dyTwo>0 \advance\pyTwo by \rcoin \pyi=\rcoin \else \advance\pyTwo by -\rcoin \pyi=-\rcoin \fi%
\ifnum\dxThree>0 \advance\pxThree by \rcoin \else \advance\pxThree by -\rcoin \fi%
\pxi=\boxx\ifnum\dxOne>0 \advance\pxi by -\rcoin \else \advance\pxi by \rcoin\fi%
\pxii=\pxThree\pyii=\pyThree\ifnum\dyTwo>0 \advance\pyii by -\rcoin \else \advance\pyii by \rcoin\fi%
\ifnum\dxOne>0\ifnum\dyTwo>0 \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[br]}\else \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tr]}\fi%
\else \ifnum\dyTwo>0 \put(\pxi,\pyi){\oval(\dcoin,\dcoin)[bl]}\else\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tl]}\fi\fi%
\ifnum\dyTwo>0\ifnum\dxThree>0\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[tl]}\else\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[tr]}\fi%
\else\ifnum\dxThree>0\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[bl]}\else\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[br]}\fi\fi%
\else\ifnum\dxTwo>0 \advance\pxTwo by \rcoin \pxi=\rcoin \else \advance\pxTwo by -\rcoin \pxi=-\rcoin\fi%
\ifnum\dyThree>0 \advance\pyThree by \rcoin \else \advance\pyThree by -\rcoin \fi%
\pyi=\pyTwo \ifnum\dyOne>0 \advance\pyi by -\rcoin \else \advance\pyi by \rcoin\fi%
\pxii=\pxThree \ifnum\dxTwo>0 \advance\pxii by -\rcoin \else \advance\pxii by \rcoin\fi\pyii=\pyThree%
\ifnum\dyOne>0\ifnum\dxTwo>0\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tl]}\else\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[tr]}\fi%
\else\ifnum\dxTwo>0\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[bl]}\else\put(\pxi,\pyi){\oval(\dcoin,\dcoin)[br]}\fi\fi%
\ifnum\dxTwo>0\ifnum\dyThree>0\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[br]}\else\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[tr]}\fi%
\else\ifnum\dyThree>0\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[bl]}\else\put(\pxii,\pyii){\oval(\dcoin,\dcoin)[tl]}\fi\fi\fi\fi%
\ifnum\lOne>0\put(\pxOne,\pyOne){\line(\dxOne,\dyOne){\lOne}}\fi%
\ifnum\lTwo>0\put(\pxTwo,\pyTwo){\line(\dxTwo,\dyTwo){\lTwo}}\fi%
\ifnum\lThree<0 \else\put(\pxThree,\pyThree){\linetype(\dxThree,\dyThree){\lThree}}\fi}%
\if#1x\ifnum\dyTwo>0\savebox{\splitbox}(\boxx,0)[b]{\tmpcmd}\else\savebox{\splitbox}(\boxx,0)[t]{\tmpcmd}\fi%
\else\ifnum\dyOne>0\savebox{\splitbox}(\boxx,0)[b]{\tmpcmd}\else\savebox{\splitbox}(\boxx,0)[t]{\tmpcmd}\fi\fi%
\put(0,\pybox){\usebox{\splitbox}}}