/* Generated by Together */

package dInternal.dTimeTable;

import dInternal.dData.SetOfResources;
import dInternal.dTimeTable.TTStructure;
import dInternal.dData.Resource;
import dInternal.dUtil.DXObject;
import xml.InPut.ReadXMLElement;
import xml.OutPut.BuildXMLElement;
import org.w3c.dom.Element;
import org.w3c.dom.Document;

public class Cycle extends DXObject{

  //********Alex
  //private Day _currentDay;
  private int _currentDayIndex=0;
  //********Alex/


  public Cycle() {
    _setOfDays = new SetOfResources(4);
  }

  /**
   *
   * */
  public void addDays(int nbDays){
    int size= _setOfDays.size();
    Resource day= _setOfDays.getResourceAt(size-1);
    String lastDayID= day.getID();
    int lastIndWeek=0;
    for(int i=0; i< TTStructure._weekTable.length; i++)
      if(TTStructure._weekTable[i].equalsIgnoreCase(lastDayID)){
        lastIndWeek=i;
        break;
      }

    for (int i=size; i< (size+nbDays); i++){
      lastIndWeek++;
      String dayID= TTStructure._weekTable[lastIndWeek%TTStructure.getNumberOfActiveDays()];
      _setOfDays.setCurrentKey(i+1);
      _setOfDays.addResource(new Resource(dayID,((Day)day.getAttach()).cloneDay()),0);
    }

  }

  /**
   *
   * */
  public void removeDays(int nbDays){
    int size= _setOfDays.size();
    Day day= (Day)_setOfDays.getResourceAt(size-1).getAttach();
    for (int i=size; i> (size-nbDays); i--){
      //String dayID= TTStructure._weekTable[i%TTStructure.getNumberOfActiveDays()];
      //_setOfDays.setCurrentKey(i+1);
      //_setOfDays.addResource(new Resource(dayID,day),0);
      _setOfDays.removeResourceAt(i-1);
    }
  }


  /**
     * get the set of days
     * @return SetOfResources the set of days
     * */
    public SetOfResources getSetOfDays(){
      return _setOfDays;
    }

    /**
     * set the set of days
     * @param SetOfResources the set of days
     * */
    public void setSetOfDays(SetOfResources setOfDays){
      _setOfDays= setOfDays;
    }

    /**
   * get the number of days in a cycle
   * @param Cycle the cycle where we want to find the number of days
   * @return int the number of days
   * */
  public int getNumberOfDays(){
    return _setOfDays.size();
  }

  /**
   * @param int the index of the day
   * */
  public Day getDay(int dayIndex){
    return (Day)_setOfDays.getResourceAt((dayIndex)).getAttach();
  }

  /**
   * */
  public Day getCurrentDay(){
    return getDay(_currentDayIndex) ;
  }

  /**
  * */
 public int getCurrentDayIndex(){
   return _currentDayIndex ;
  }

  /**
   * */
  public void setCurrentDayIndex(int curDayIndex){
    _currentDayIndex = curDayIndex;
  }



    /**
    *read a xml tag containing a set of days and build the resource
    * @param Element the root xml tag of the set of days
   * */
  public String readXMLtag(Element setofDays){
    ReadXMLElement list= new ReadXMLElement();
    String ID="";
    String key="";
    int size= list.getSize(setofDays,_TAGITEM);
    if (size == 0){
      _error = _errorMessage;
      return _error;
    }
    for (int i=0; i< size; i++){
      Day setOfSequences = new Day();
      Element day= list.getElement(setofDays,_TAGITEM,i);
      ID= list.getElementValue(day,_TAGITEM4);
      key= list.getElementValue(day,_TAGITEM1);
      Element sequences= list.getElement(day,_TAGITEM2,0);
      if (!setOfSequences.readXMLtag(sequences).equals("")){;
      _error = _errorMessage;
      return _error;
      }
      _setOfDays.setCurrentKey(Integer.parseInt(key));
      _setOfDays.addResource(new Resource(ID,setOfSequences),0);
    }// end for (int i=0; i< size; i++)
    return _error;
  }

    /**
    * Contruct a xml element from the set of days
    * @param Document the root xml document
    * @Element the xml tag of the set of days
   * */
   public Element writeXMLtag(Document doc){
    BuildXMLElement xmlElt;
    try{
      xmlElt = new BuildXMLElement();
      Element eltDays= xmlElt.createElement(doc,SetOfCycles._TAGITEM3);
      for (int i=0; i<_setOfDays.size(); i++){
        Element eltDay= xmlElt.createElement(doc,Cycle._TAGITEM);
        Element day= ((Day)_setOfDays.getResourceAt(i).getAttach()).writeXMLtag(doc);
        Element dayID= xmlElt.createElement(doc,_TAGITEM4,_setOfDays.getResourceAt(i).getID());
        Element dayKey= xmlElt.createElement(doc,_TAGITEM1,Integer.toString((int)_setOfDays.getResourceAt(i).getKey()));
        eltDay= xmlElt.appendChildInElement(eltDay, day);
        eltDay= xmlElt.appendChildInElement(eltDay, dayID);
        eltDay= xmlElt.appendChildInElement(eltDay, dayKey);
        eltDays= xmlElt.appendChildInElement(eltDays, eltDay);
      }
      return eltDays;
    } catch(Exception e){
      System.out.println("Cycle: "+e);//debug
      return null;
    }
   }

   public String getError(){
    return _error;
  }

  private SetOfResources _setOfDays;
  private int _periodLength;
  private String _error = "";
  private String _errorMessage = "XML file is corrupted";
  static final String _TAGITEM="TTday";
  static final String _TAGITEM1="dayRef";
  static final String _TAGITEM2="TTsequences";
  static final String _TAGITEM4="dayID";
}
